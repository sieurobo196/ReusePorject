package vn.itt.msales.entity;
// Generated Oct 9, 2015 3:36:35 PM by Hibernate Tools 4.3.1

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonSetter;
import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

/**
 * PromotionTransRetailer generated by hbm2java
 */
@Entity
@Table(name = "PROMOTION_TRANS_RETAILER"
)
@JsonFilter("JSONFILTER")
public class PromotionTransRetailer implements java.io.Serializable, Comparable<Object> {

    private static final long serialVersionUID = 960891102437931116L;

    @Id
    @GeneratedValue(strategy = IDENTITY)
    @Column(name = "ID", unique = true, nullable = false)
    private Integer id;

    @Transient
    private Integer promotionId;

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "PROMOTION_ID", nullable = false)
    private Promotion promotions;

    public Promotion getPromotions() {
        return promotions;
    }

    public void setPromotions(Promotion promotions) {
        this.promotions = promotions;
    }

    @Transient
    private Integer salesmanId;

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "SALESMAN_ID")
    private User salesmanUsers;

    public User getSalesmanUsers() {
        return salesmanUsers;
    }

    public void setSalesmanUsers(User salesmanUsers) {
        this.salesmanUsers = salesmanUsers;
    }

    @Transient
    private int retailerId;

    @JsonIgnoreProperties(value = {"posCode", "channels", "locations", "statuss", "hierarchy", "ownerName", "ownerCode",
        "ownerCodeLocation", "tel", "mobile", "otherTel", "fax", "email", "website", "lat", "lng", "isActive",
        "beginAt", "endAt", "createdAt", "createdUser"})
    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "RETAILER_ID", nullable = false)
    private POS poss;

    public POS getPoss() {
        return poss;
    }

    public void setPoss(POS poss) {
        this.poss = poss;
    }

    @Transient
    private Integer approveId;
    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "APPROVE_ID")
    private User approves;

    public User getApproves() {
        return approves;
    }

    public void setApproves(User approves) {
        this.approves = approves;
    }

    @Transient
    private Integer statusId;

    @JsonIgnoreProperties(value = {"statusTypes"})
    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "STATUS_ID", nullable = false)
    private Status statuss;

    public Status getStatuss() {
        return statuss;
    }

    public void setStatuss(Status statuss) {
        this.statuss = statuss;
    }
    @Transient
    private Integer orderId;
    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "ORDER_ID")
    private SalesOrder orders;

    public SalesOrder getOrders() {
        return orders;
    }

    public void setOrders(SalesOrder orders) {
        this.orders = orders;
    }

    @Column(name = "QUANTITY")
    private Integer quantity;
    @Column(name = "AMOUNT")
    private Integer amount;
    @Column(name = "NOTE", length = 256)
    private String note;
    @Column(name = "AWARD_QUANTITY")
    private Integer awardQuantity;
    @Column(name = "AWARD_AMOUNT")
    private Integer awardAmount;
    @Column(name = "AWARD_NAME", length = 256)
    private String awardName;
    @Column(name = "IS_OTHER")
    private Integer isOther;

    @Column(name = "AWARD_GOODS_ID", nullable = false)
    private Integer awardGoodsId;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "CREATED_AT", nullable = false, length = 19)
    private Date createdAt;
    @Column(name = "CREATED_USER", nullable = false)
    private Integer createdUser;
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "UPDATED_AT", length = 19)
    private Date updatedAt;
    @Column(name = "UPDATED_USER", nullable = false)
    private Integer updatedUser;
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "DELETED_AT", length = 19)
    private Date deletedAt;
    @Column(name = "DELETED_USER", nullable = false)
    private Integer deletedUser;

    @Transient
    @JsonIgnoreProperties(value = {"statuss", "createdAt", "createdUser", "updatedAt", "updatedUser", "deletedAt", "deletedUser"})
    private Object awards;

    public Object getAwards() {
        return awards;
    }

    public void setAwards(Object awards) {
        this.awards = awards;
    }

    @Transient
    private Integer accumulationRetailerId = null;

    public Integer getAccumulationRetailerId() {
        return accumulationRetailerId;
    }

    public void setAccumulationRetailerId(Integer accumulationRetailerId) {
        this.accumulationRetailerId = accumulationRetailerId;
    }

    @Transient
    private Integer transRetailerId;

    public Integer getTransRetailerId() {
        transRetailerId = id;
        return transRetailerId;
    }

    public void setTransRetailerId(Integer transRetailerId) {
        this.transRetailerId = transRetailerId;
    }

    @Transient
    boolean approve = false;

    public boolean isApprove() {
        return approve;
    }

    public void setApprove(boolean approve) {
        this.approve = approve;
    }

    public PromotionTransRetailer() {
    }

    public PromotionTransRetailer(Integer promotionId, Integer retailerId, Integer statusId, Integer orderId, Integer awardGoodsId, Date createdAt, Integer createdUser, Integer updatedUser, Integer deletedUser) {
        this.promotionId = promotionId;
        this.retailerId = retailerId;
        this.statusId = statusId;
        this.orderId = orderId;
        this.awardGoodsId = awardGoodsId;
        this.createdAt = createdAt;
        this.createdUser = createdUser;
        this.updatedUser = updatedUser;
        this.deletedUser = deletedUser;
    }

    public PromotionTransRetailer(Integer promotionId, Integer salesmanId, Integer retailerId, Integer approveId, Integer statusId, Integer orderId, Integer quantity, Integer amount, String note, Integer awardQuantity, Integer awardAmount, String awardName, Integer isOther, Integer awardGoodsId, Date createdAt, Integer createdUser, Date updatedAt, Integer updatedUser, Date deletedAt, Integer deletedUser) {
        this.promotionId = promotionId;
        this.salesmanId = salesmanId;
        this.retailerId = retailerId;
        this.approveId = approveId;
        this.statusId = statusId;
        this.orderId = orderId;
        this.quantity = quantity;
        this.amount = amount;
        this.note = note;
        this.awardQuantity = awardQuantity;
        this.awardAmount = awardAmount;
        this.awardName = awardName;
        this.isOther = isOther;
        this.awardGoodsId = awardGoodsId;
        this.createdAt = createdAt;
        this.createdUser = createdUser;
        this.updatedAt = updatedAt;
        this.updatedUser = updatedUser;
        this.deletedAt = deletedAt;
        this.deletedUser = deletedUser;
    }

    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
        if (id != null) {
            this.transRetailerId = this.id;
        }
    }

    public Integer getPromotionId() {
        return this.promotionId;
    }

    public void setPromotionId(Integer promotionId) {
        this.promotionId = promotionId;
        if (promotionId != null) {
            Promotion promotion = new Promotion();
            promotion.setId(promotionId);
            this.promotions = promotion;
        }
    }

    public Integer getSalesmanId() {
        return this.salesmanId;
    }

    public void setSalesmanId(Integer salesmanId) {
        this.salesmanId = salesmanId;
        if (salesmanId != null) {
            User user = new User();
            user.setId(salesmanId);
            this.salesmanUsers = user;
        }
    }

    public Integer getRetailerId() {
        return this.retailerId;
    }

    public void setRetailerId(Integer retailerId) {
        this.retailerId = retailerId;
        if (retailerId != null) {
            POS pos = new POS();
            pos.setId(retailerId);
            this.poss = pos;
        }
    }

    public Integer getApproveId() {
        return this.approveId;
    }

    public void setApproveId(Integer approveId) {
        this.approveId = approveId;
        if (approveId != null) {
            User user = new User();
            user.setId(approveId);
            this.approves = user;
        }
    }

    public Integer getStatusId() {
        return this.statusId;
    }

    public void setStatusId(Integer statusId) {
        this.statusId = statusId;
        if (statusId != null) {
            Status status = new Status();
            status.setId(statusId);
            this.statuss = status;
        }
    }

    public Integer getOrderId() {
        return this.orderId;
    }

    public void setOrderId(Integer orderId) {
        this.orderId = orderId;
        if (orderId != null) {
            SalesOrder salesOrder = new SalesOrder();
            salesOrder.setId(orderId);
            this.orders = salesOrder;
        }
    }

    public Integer getQuantity() {
        return this.quantity;
    }

    public void setQuantity(Integer quantity) {
        this.quantity = quantity;
    }

    public Integer getAmount() {
        return this.amount;
    }

    public void setAmount(Integer amount) {
        this.amount = amount;
    }

    public String getNote() {
        return this.note;
    }

    public void setNote(String note) {
        this.note = note;
    }

    public Integer getAwardQuantity() {
        return this.awardQuantity;
    }

    public void setAwardQuantity(Integer awardQuantity) {
        this.awardQuantity = awardQuantity;
    }

    public Integer getAwardAmount() {
        return this.awardAmount;
    }

    public void setAwardAmount(Integer awardAmount) {
        this.awardAmount = awardAmount;
    }

    public String getAwardName() {
        return this.awardName;
    }

    public void setAwardName(String awardName) {
        this.awardName = awardName;
    }

    public Integer getIsOther() {
        return this.isOther;
    }

    public void setIsOther(Integer isOther) {
        this.isOther = isOther;
    }

    public Integer getAwardGoodsId() {
        return this.awardGoodsId;
    }

    public void setAwardGoodsId(Integer awardGoodsId) {
        this.awardGoodsId = awardGoodsId;
    }

    @JsonIgnore
    public Date getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(Date createdAt) {
        this.createdAt = createdAt;
    }

    @JsonIgnore
    public Integer getCreatedUser() {
        return this.createdUser;
    }

    public void setCreatedUser(Integer createdUser) {
        this.createdUser = createdUser;
    }

    @JsonIgnore
    public Date getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(Date updatedAt) {
        this.updatedAt = updatedAt;
    }

    @JsonIgnore
    public Integer getUpdatedUser() {
        return this.updatedUser;
    }

    public void setUpdatedUser(Integer updatedUser) {
        this.updatedUser = updatedUser;
    }

    @JsonIgnore
    public Date getDeletedAt() {
        return this.deletedAt;
    }

    public void setDeletedAt(Date deletedAt) {
        this.deletedAt = deletedAt;
    }

    @JsonIgnore
    public Integer getDeletedUser() {
        return this.deletedUser;
    }

    @JsonSetter
    public void setDeletedUser(Integer deletedUser) {
        this.deletedUser = deletedUser;
    }

    @Override
    public int compareTo(Object object) {
        Date date1 = updatedAt != null ? updatedAt : createdAt;
        Date date2;
        if (object instanceof PromotionAccumulationRetailer) {
            date2 = ((PromotionAccumulationRetailer) object).getUpdatedAt() != null ? ((PromotionAccumulationRetailer) object).getUpdatedAt() : ((PromotionAccumulationRetailer) object).getCreatedAt();
        } else {
            date2 = ((PromotionTransRetailer) object).getUpdatedAt() != null ? ((PromotionTransRetailer) object).getUpdatedAt() : ((PromotionTransRetailer) object).getCreatedAt();
        }
        return date2.compareTo(date1);
    }
}
