package vn.itt.msales.entity;
// Generated Jun 22, 2015 9:37:59 AM by Hibernate Tools 4.3.1

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;

import vn.itt.msales.common.json.validator.MsalesValidator;

/**
 * SalesTransDetails generated by hbm2java
 */
@Entity
@Table(name = "`sales_trans_details`")
@JsonFilter("JSONFILTER")
@JsonSerialize(include=JsonSerialize.Inclusion.NON_NULL)
public class SalesTransDetails implements java.io.Serializable {

    private static final long serialVersionUID = -2562609210222130990L;

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO, generator = "SEQ_ID")
    @SequenceGenerator(name = "SEQ_ID", sequenceName = "SEQ_SALESTRANSDETAILS_ID")
    @Column(name = "ID", unique = true, nullable = false)
    private Integer id;

    @NotNull(message = MsalesValidator.SALES_TRANS_DETAILS_SALES_TRANS_DATE_NULL)
    @JsonFormat(pattern = "dd/MM/yyyy HH:mm:ss", shape = JsonFormat.Shape.STRING, timezone = "GMT+7")
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "SALES_TRANS_DATE", nullable = false, length = 19)
    private Date salesTransDate;

    @NotNull(message = MsalesValidator.SALES_TRANS_DETAILS_QUANTITY_NULL)
    @Column(name = "QUANTITY", nullable = false)
    private Integer quantity;

  //  @NotNull(message = MsalesValidator.SALES_TRANS_DETAILS_PRICE_NULL)
    @Column(name = "PRICE", nullable = false)
    @Min(value = 0, message = "Giá hàng hóa không thể nhỏ hơn không")
    private Integer price = 0;

  //  @NotNull(message = MsalesValidator.SALES_TRANS_DETAILS_IS_FOCUS_NULL)
    @Column(name = "IS_FOCUS", nullable = false)
    private Boolean isFocus ;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "CREATED_AT", nullable = false, length = 19)
    @JsonIgnore
    private Date createdAt;

    @Column(name = "CREATED_USER", nullable = false)
    @NotNull(message = MsalesValidator.CREATED_USER_NULL)
    private Integer createdUser;
    
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "UPDATED_AT", length = 19)
    @JsonIgnore
    private Date updatedAt;

    @Column(name = "UPDATED_USER", nullable = false)
    @NotNull(message = MsalesValidator.UPDATED_USER_NULL)
    private Integer updatedUser;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "DELETED_AT", length = 19)
    @JsonIgnore
    private Date deletedAt;

    @Column(name = "DELETED_USER", nullable = false)
    @NotNull(message = MsalesValidator.DELETED_USER_NULL)
    private Integer deletedUser;

    @Transient
    private Integer goodsId;

    @Transient
    private Integer goodsUnitId;

    @Transient
    private Integer salesTransId;

    @NotNull(message = MsalesValidator.SALES_TRANS_DETAILS_GOODS_ID_NULL)
    @JsonIgnoreProperties({"parentId", "parents", "statuss", "goodsCode", "statusId", "isRecover",
        "price", "factor", "isFocus", "order", "goodsCategorys"})
    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "GOODS_ID", nullable = false)
    private Goods goodss;

    public Goods getGoodss() {
        return goodss;
    }

    public void setGoodss(Goods goodss) {
        this.goodss = goodss;
    }

    @NotNull(message = MsalesValidator.SALES_TRANS_DETAILS_GOODS_UNITS_ID_NULL)
    @JsonIgnoreProperties({"price", "quantity", "isActive", "note", "goodss", "unit"})
    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "GOODS_UNIT_ID", nullable = false)
    private GoodsUnit goodsUnits;

    public GoodsUnit getGoodsUnits() {
        return goodsUnits;
    }

    public void setGoodsUnits(GoodsUnit goodsUnits) {
        this.goodsUnits = goodsUnits;
    }

    @NotNull(message = MsalesValidator.SALES_TRANS_DETAILS_SALES_TRANS_ID_NULL)
    @JsonIgnoreProperties({"transType", "transStatus", "salesTransDate", "note", "fromStock", "toStock", "order",
        "fromStocks", "toStocks", "orders", "mcps"})
    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "SALES_TRANS_ID", nullable = false)
    private SalesTrans salesTranss;

    public SalesTrans getSalesTranss() {
        return salesTranss;
    }

    public void setSalesTranss(SalesTrans salesTranss) {
        this.salesTranss = salesTranss;
    }

    public SalesTransDetails() {
    }

    public SalesTransDetails(int goodsId, Integer goodsUnitId, Integer salesTransId, Date salesTransDate, Integer quantity, Integer price, boolean isFocus, Date createdAt, Integer createdUser, Date updatedAt, Integer updatedUser, Date deletedAt, Integer deletedUser) {
        this.goodsId = goodsId;
        this.goodsUnitId = goodsUnitId;
        this.salesTransId = salesTransId;
        this.salesTransDate = salesTransDate;
        this.quantity = quantity;
        this.price = price;
        this.isFocus = isFocus;
        this.createdAt = createdAt;
        this.createdUser = createdUser;
        this.updatedAt = updatedAt;
        this.updatedUser = updatedUser;
        this.deletedAt = deletedAt;
        this.deletedUser = deletedUser;
    }

    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @JsonIgnore
    public Integer getGoodsId() {
        return this.goodsId;
    }

    @JsonSetter
    public void setGoodsId(Integer goodsId) {
        this.goodsId = goodsId;
        if (goodsId != null) {
            Goods goods = new Goods();
            goods.setId(this.goodsId);
            this.goodss = goods;
        }

    }

    @JsonIgnore
    public Integer getGoodsUnitId() {
        return this.goodsUnitId;
    }

    @JsonSetter
    public void setGoodsUnitId(Integer goodsUnitId) {
        this.goodsUnitId = goodsUnitId;
        if (goodsUnitId != null) {
            GoodsUnit goodsUnit = new GoodsUnit();
            goodsUnit.setId(this.goodsUnitId);
            this.goodsUnits = goodsUnit;
        }

    }

    @JsonIgnore
    public Integer getSalesTransId() {
        return this.salesTransId;
    }

    @JsonSetter
    public void setSalesTransId(Integer salesTransId) {
        this.salesTransId = salesTransId;
        if (salesTransId != null) {
            SalesTrans salesTrans = new SalesTrans();
            salesTrans.setId(this.salesTransId);
            this.salesTranss = salesTrans;
        }

    }

    public Date getSalesTransDate() {
        return this.salesTransDate;
    }

    public void setSalesTransDate(Date salesTransDate) {
        this.salesTransDate = salesTransDate;
    }

    public Integer getQuantity() {
        return this.quantity;
    }

    public void setQuantity(int quantity) {
        this.quantity = quantity;
    }

    public Integer getPrice() {
        return this.price;
    }

    public void setPrice(int price) {
        this.price = price;
    }

    public boolean getIsFocus() {
        return this.isFocus;
    }

    public void setIsFocus(Boolean isFocus) {
        this.isFocus = isFocus;
    }

    public Date getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(Date createdAt) {
        this.createdAt = createdAt;
    }

    @JsonIgnore
    public Integer getCreatedUser() {
        return this.createdUser;
    }

    @JsonSetter
    public void setCreatedUser(int createdUser) {
        this.createdUser = createdUser;
    }

    public Date getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(Date updatedAt) {
        this.updatedAt = updatedAt;
    }

    @JsonIgnore
    public Integer getUpdatedUser() {
        return this.updatedUser;
    }

    @JsonSetter
    public void setUpdatedUser(int updatedUser) {
        this.updatedUser = updatedUser;
    }

    public Date getDeletedAt() {
        return this.deletedAt;
    }

    public void setDeletedAt(Date deletedAt) {
        this.deletedAt = deletedAt;
    }

    @JsonIgnore
    public Integer getDeletedUser() {
        return this.deletedUser;
    }

    @JsonSetter
    public void setDeletedUser(int deletedUser) {
        this.deletedUser = deletedUser;
    }

    @Transient
    private Long  totalPrice;

	public Long getTotalPrice() {
		return totalPrice;
	}

	public void setTotalPrice(Long totalPrice) {
		this.totalPrice = totalPrice;
	}
	@Transient
	private Integer soLuongTon;

	public Integer getSoLuongTon() {
		return soLuongTon;
	}

	public void setSoLuongTon(Integer soLuongTon) {
		this.soLuongTon = soLuongTon;
	}
	@Transient
	private Long thanhTienTon;

	public Long getThanhTienTon() {
		return thanhTienTon;
	}

	public void setThanhTienTon(Long thanhTienTon) {
		this.thanhTienTon = thanhTienTon;
	}
    
}
