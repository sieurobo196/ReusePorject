package vn.itt.msales.entity;
// Generated Jun 22, 2015 9:37:59 AM by Hibernate Tools 4.3.1

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;

import java.util.Date;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.validation.constraints.NotNull;

import vn.itt.msales.common.json.validator.MsalesValidator;

/**
 * SalesTrans generated by hbm2java
 */
@Entity
@Table(name = "`sales_trans`")
@JsonFilter("JSONFILTER")
@JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
public class SalesTrans implements java.io.Serializable,Comparable<SalesTrans> {

    private static final long serialVersionUID = -7498099874293606747L;

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO, generator = "SEQ_ID")
    @SequenceGenerator(name = "SEQ_ID", sequenceName = "SEQ_SALESTRANS_ID")
    @Column(name = "ID", unique = true, nullable = false)
    private Integer id;

    @Column(name = "TRANS_CODE", nullable = true, length = 256)
    private String transCode;

    @NotNull(message = MsalesValidator.SALES_TRANS_TRANS_TYPE_NULL)
    @Column(name = "TRANS_TYPE", nullable = false)
    private Integer transType;

    //@NotNull(message = MsalesValidator.SALES_TRANS_TRANS_STATUS_NULL)
    @Column(name = "TRANS_STATUS", nullable = true)
    private Integer transStatus;

    @NotNull(message = MsalesValidator.SALES_TRANS_SALES_TRANS_DATE_NULL)
    @JsonFormat(pattern = "dd/MM/yyyy HH:mm:ss", shape = JsonFormat.Shape.STRING, timezone = "GMT+7")
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "SALES_TRANS_DATE", nullable = false, length = 19)
    private Date salesTransDate;

    @Column(name = "NOTE", length = 256)
    private String note;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "CREATED_AT", nullable = false, length = 19)
    @JsonIgnore
    private Date createdAt;

    @Column(name = "CREATED_USER", nullable = false)
    @NotNull(message = MsalesValidator.CREATED_USER_NULL)
    private Integer createdUser;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "UPDATED_AT", length = 19)
    @JsonIgnore
    private Date updatedAt;

    @Column(name = "UPDATED_USER", nullable = false)
    @NotNull(message = MsalesValidator.UPDATED_USER_NULL)
    private Integer updatedUser;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "DELETED_AT", length = 19)
    @JsonIgnore
    private Date deletedAt;

    @Column(name = "DELETED_USER", nullable = false)
    @NotNull(message = MsalesValidator.DELETED_USER_NULL)
    private Integer deletedUser;

    @Transient
    private Integer orderId;

    @Transient
    private Integer mcpId;

    @Transient
    private Integer fromStockId;

    @Transient
    private Integer toStockId;

    @Transient
    private Integer companyId;

    @NotNull(message = MsalesValidator.SALES_TRANS_COMPANY_ID_NULL)
    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "COMPANY_ID", nullable = false)
    @JsonIgnoreProperties(value = {"locations", "statuss", "code", "address", "contactPersonName", "tel", "fax",
        "email", "lat", "lng", "logoPath", "note"})
    private Company companys;

    public Company getCompanys() {
        return companys;
    }

    public void setCompanys(Company companys) {
        this.companys = companys;
    }

    @JsonIgnoreProperties({"posId", "salemanUserId", "channelId", "statusId", "statuss"})
    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "FROM_STOCK_ID", nullable = true)
    private SalesStock fromStocks;

    public SalesStock getFromStocks() {
        return fromStocks;
    }

    public void setFromStocks(SalesStock fromStocks) {
        this.fromStocks = fromStocks;
    }

    @JsonIgnoreProperties({"posId", "salemanUserId", "channelId", "statusId", "statuss"})
    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "TO_STOCK_ID", nullable = true)
    private SalesStock toStocks;

    public SalesStock getToStocks() {
        return toStocks;
    }

    public void setToStocks(SalesStock toStocks) {
        this.toStocks = toStocks;
    }

    @JsonIgnoreProperties({"stockId", "salesTransDate", "note"})
    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "ORDER_ID", nullable = true)
    private SalesOrder orders;

    public SalesOrder getOrders() {
        return orders;
    }

    public void setOrders(SalesOrder orders) {
        this.orders = orders;
    }

    @JsonIgnoreProperties({"type", "beginDate", "implementEmployeeId", "implementEmployees",
        "statusId", "statuss", "finishTime", "isActive", "note"})
    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "MCP_ID", nullable = true)
    private MCP mcps;

    public MCP getMcps() {
        return mcps;
    }

    public void setMcps(MCP mcps) {
        this.mcps = mcps;
    }

    public SalesTrans() {
    }

    public SalesTrans(String transCode, int transType, Integer transStatus, Date salesTransDate, Date createdAt, Integer createdUser, Date updatedAt, Integer updatedUser, Date deletedAt, Integer deletedUser) {
        this.transCode = transCode;
        this.transType = transType;
        this.transStatus = transStatus;
        this.salesTransDate = salesTransDate;
        this.createdAt = createdAt;
        this.createdUser = createdUser;
        this.updatedAt = updatedAt;
        this.updatedUser = updatedUser;
        this.deletedAt = deletedAt;
        this.deletedUser = deletedUser;
    }

    public SalesTrans(String transCode, int transType, Integer transStatus, Integer fromStockId, Integer toStockId, Integer orderId, Integer mcpId, Date salesTransDate, String note, Date createdAt, Integer createdUser, Date updatedAt, Integer updatedUser, Date deletedAt, Integer deletedUser) {
        this.transCode = transCode;
        this.transType = transType;
        this.transStatus = transStatus;
        this.fromStockId = fromStockId;
        this.toStockId = toStockId;
        this.orderId = orderId;
        this.mcpId = mcpId;
        this.salesTransDate = salesTransDate;
        this.note = note;
        this.createdAt = createdAt;
        this.createdUser = createdUser;
        this.updatedAt = updatedAt;
        this.updatedUser = updatedUser;
        this.deletedAt = deletedAt;
        this.deletedUser = deletedUser;
    }

    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getTransCode() {
        return transCode;
    }

    public void setTransCode(String transCode) {
        this.transCode = transCode;
    }

    public Integer getTransType() {
        return this.transType;
    }

    public void setTransType(int transType) {
        this.transType = transType;
    }

    public Integer getTransStatus() {
        return this.transStatus;
    }

    public void setTransStatus(int transStatus) {
        this.transStatus = transStatus;
    }

    @JsonIgnore
    public Integer getFromStockId() {
        return this.fromStockId;
    }

    @JsonSetter
    public void setFromStockId(Integer fromStockId) {
        this.fromStockId = fromStockId;
        if (this.fromStockId != null) {
            SalesStock st = new SalesStock();
            st.setId(this.fromStockId);
            this.fromStocks = st;
        }
    }

    @JsonIgnore
    public Integer getToStockId() {
        return this.toStockId;
    }

    @JsonSetter
    public void setToStockId(Integer toStockId) {
        this.toStockId = toStockId;
        if (this.toStockId != null) {
            SalesStock st = new SalesStock();
            st.setId(this.toStockId);
            this.toStocks = st;
        }
    }

    @JsonIgnore
    public Integer getOrderId() {
        return this.orderId;
    }

    @JsonSetter
    public void setOrderId(Integer orderId) {
        this.orderId = orderId;
        if (this.orderId != null) {
            SalesOrder so = new SalesOrder();
            so.setId(this.orderId);
            this.orders = so;
        }

    }

    @JsonIgnore
    public Integer getMcpId() {
        return this.mcpId;
    }

    @JsonSetter
    public void setMcpId(Integer mcpId) {
        this.mcpId = mcpId;
        if (this.mcpId != null) {
            MCP s = new MCP();
            s.setId(this.mcpId);
            this.mcps = s;
        }
    }

    public Date getSalesTransDate() {
        return this.salesTransDate;
    }

    public void setSalesTransDate(Date salesTransDate) {
        this.salesTransDate = salesTransDate;
    }

    public String getNote() {
        return this.note;
    }

    public void setNote(String note) {
        this.note = note;
    }

    public Date getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(Date createdAt) {
        this.createdAt = createdAt;
    }

    @JsonIgnore
    public Integer getCreatedUser() {
        return this.createdUser;
    }

    @JsonSetter
    public void setCreatedUser(int createdUser) {
        this.createdUser = createdUser;
    }

    public Date getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(Date updatedAt) {
        this.updatedAt = updatedAt;
    }

    @JsonIgnore
    public Integer getUpdatedUser() {
        return this.updatedUser;
    }

    @JsonSetter
    public void setUpdatedUser(int updatedUser) {
        this.updatedUser = updatedUser;
    }

    public Date getDeletedAt() {
        return this.deletedAt;
    }

    public void setDeletedAt(Date deletedAt) {
        this.deletedAt = deletedAt;
    }

    @JsonIgnore
    public Integer getDeletedUser() {
        return this.deletedUser;
    }

    @JsonSetter
    public void setDeletedUser(int deletedUser) {
        this.deletedUser = deletedUser;
    }

    @JsonIgnore
    public Integer getCompanyId() {
        return companyId;
    }

    @JsonSetter
    public void setCompanyId(Integer companyId) {
        this.companyId = companyId;
        if (companyId != null) {
            Company company = new Company();
            company.setId(this.getCompanyId());
            this.companys = company;
        }
    }

    //DuanND
    @Transient
    private Channel channel;

    @JsonIgnoreProperties(value = {"isSalePoint", "contactPersonName", "fax", "email", "lat", "lng", "note", "parents", "channelTypes", "statuss"})
    public Channel getChannel() {
        return channel;
    }

    public void setChannel(Channel channel) {
        this.channel = channel;
    }
    @Transient
    private User employee;

    @JsonIgnoreProperties(value = {"monitoringUsers", "lastName", "firstName", "statuss", "employerUsers", "username", "sex", "email", "isActive", "activeCode", "employerType", "useEvoucher", "statusId", "createdUser", "updatedUser", "locations", "companys", "birthday", "yahooId", "skypeId", "isdn", "address", "note", "ipLastLogin"})
    public User getEmployee() {
        return employee;
    }

    public void setEmployee(User employee) {
        this.employee = employee;
    }

    @Transient
    private List<SalesTransDetails> salesTransDetails;

    public List<SalesTransDetails> getSalesTransDetails() {
        return salesTransDetails;
    }

    public void setSalesTransDetails(List<SalesTransDetails> salesTransDetails) {
        this.salesTransDetails = salesTransDetails;
    }

    //sort date
    @Override
    public int compareTo(SalesTrans salesTrans) {
        return salesTrans.getCreatedAt().compareTo(this.getCreatedAt());
    }

}
