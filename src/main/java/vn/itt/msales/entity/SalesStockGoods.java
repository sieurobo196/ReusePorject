package vn.itt.msales.entity;

// Generated Jun 22, 2015 9:37:59 AM by Hibernate Tools 4.3.1
import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.validation.constraints.Max;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;
import org.springframework.format.annotation.NumberFormat;
import vn.itt.msales.common.json.validator.MsalesValidator;
import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import javax.persistence.GenerationType;
import javax.persistence.SequenceGenerator;

/**
 * SalesStockGoods generated by hbm2java
 */
@Entity
@Table(name = "`sales_stock_goods`")
@JsonFilter("JSONFILTER")
@JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
public class SalesStockGoods implements java.io.Serializable {

    private static final long serialVersionUID = 5186342673804713792L;

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO, generator = "SEQ_ID")
    @SequenceGenerator(name = "SEQ_ID", sequenceName = "SEQ_SALESSTOCKGOODS_ID")
    @Column(name = "ID", unique = true, nullable = false)
    private Integer id;

    @NumberFormat(style = NumberFormat.Style.NUMBER)
    @Transient
    private Integer stockId;

    @NumberFormat(style = NumberFormat.Style.NUMBER)
    @Transient
    private Integer goodsId;

    @Transient
    private Integer goodsUnitId;

    @Transient
    private Integer goodsStatusId;

    @NotNull(message = "Số lượng hàng hóa bắt buộc nhập")
    @Min(value = 0, message = "Số lượng hàng hóa không thể nhỏ hơn 0")
    @Column(name = "QUANTITY", nullable = false)
    private Integer quantity;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "CREATED_AT", nullable = false, length = 19)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = MsalesValidator.DATE_FORMAT_LONG, timezone = "GMT+7")
    private Date createdAt;

    @NumberFormat(style = NumberFormat.Style.NUMBER)
    @NotNull(message = MsalesValidator.CREATED_USER_NULL)
    @Column(name = "CREATED_USER", nullable = false)
    private Integer createdUser;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "UPDATED_AT", length = 19)
    @JsonIgnore
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = MsalesValidator.DATE_FORMAT_LONG, timezone = "GMT+7")
    private Date updatedAt;

    @Column(name = "UPDATED_USER", nullable = false)
    @NotNull(message = MsalesValidator.UPDATED_USER_NULL)
    private Integer updatedUser;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "DELETED_AT", length = 19)
    @JsonIgnore
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = MsalesValidator.DATE_FORMAT_LONG, timezone = "GMT+7")
    private Date deletedAt;

    @Column(name = "DELETED_USER", nullable = false)
    @NotNull(message = MsalesValidator.DELETED_USER_NULL)
    private Integer deletedUser;

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "GOODS_ID", nullable = false)
    @NotNull(message = MsalesValidator.SALES_STOCK_GOODS_GOODS_ID_NULL)
    private Goods goodss;

    @JsonIgnoreProperties(value = {"parentId", "goodsCode", "statusId",
        "isRecover", "price", "factor", "isFocus", "order",
        "goodsCategorys", "parents", "statuss"})
    public Goods getGoodss() {
        return goodss;
    }

    public void setGoodss(Goods goods) {
        this.goodss = goods;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "GOODS_UNIT_ID", nullable = true)
    private GoodsUnit goodsUnits;

    @JsonIgnoreProperties(value = {"quantity", "note", "goodss", "units",
        "isActive", "deletedAt"})
    @JsonInclude(JsonInclude.Include.ALWAYS)
    public GoodsUnit getGoodsUnits() {
        return goodsUnits;
    }

    @JsonGetter
    public void setGoodsUnits(GoodsUnit goodsUnit) {
        this.goodsUnits = goodsUnit;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "STOCK_ID", nullable = false)
    @NotNull(message = MsalesValidator.SALES_STOCK_GOODS_STOCK_ID_NULL)
    private SalesStock stocks;

    public SalesStock getStocks() {
        return stocks;
    }

    public void setStocks(SalesStock stock) {
        this.stocks = stock;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "GOODS_STATUS_ID", nullable = false)
    @NumberFormat(style = NumberFormat.Style.NUMBER)
    @NotNull(message = MsalesValidator.SALES_STOCK_GOODS_GOODS_STATUS_ID_NULL)
    private Status goodsStatuss;

    @JsonIgnoreProperties(value = {"value", "statusTypes"})
    public Status getGoodsStatuss() {
        return goodsStatuss;
    }

    public void setGoodsStatuss(Status goodsStatus) {
        this.goodsStatuss = goodsStatus;
    }

    @NotNull(message = MsalesValidator.SALES_STOCK_GOODS_IS_ACTIVE_NULL)
    @NumberFormat(style = NumberFormat.Style.NUMBER)
    @Max(value = 9, message = "IsActive có giá trị từ 1-9")
    @Column(name = "IS_ACTIVE", nullable = false)
    private Integer isActive;

    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = MsalesValidator.DATE_FORMAT_LONG, timezone = "GMT+7")
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "ACTIVE_DATE", nullable = true, length = 19)
    private Date activeDate;

    public SalesStockGoods() {
    }

    public SalesStockGoods(Integer stockId, Integer goodsId,
            Integer goodsStatusId, Integer isActive, Date activeDate,
            Date createdAt, Integer createdUser, Date updatedAt,
            Integer updatedUser, Date deletedAt, Integer deletedUser) {
        this.stockId = stockId;
        this.goodsId = goodsId;
        this.goodsStatusId = goodsStatusId;
        this.isActive = isActive;
        this.activeDate = activeDate;
        this.createdAt = createdAt;
        this.createdUser = createdUser;
        this.updatedAt = updatedAt;
        this.updatedUser = updatedUser;
        this.deletedAt = deletedAt;
        this.deletedUser = deletedUser;
    }

    public SalesStockGoods(Integer stockId, Integer goodsId,
            Integer goodsUnitId, Integer goodsStatusId, Integer isActive,
            Date activeDate, Date createdAt, Integer createdUser,
            Date updatedAt, Integer updatedUser, Date deletedAt,
            Integer deletedUser) {
        this.stockId = stockId;
        this.goodsId = goodsId;
        this.goodsUnitId = goodsUnitId;
        this.goodsStatusId = goodsStatusId;
        this.isActive = isActive;
        this.activeDate = activeDate;
        this.createdAt = createdAt;
        this.createdUser = createdUser;
        this.updatedAt = updatedAt;
        this.updatedUser = updatedUser;
        this.deletedAt = deletedAt;
        this.deletedUser = deletedUser;
    }

    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    // @Column(name="STOCK_ID", nullable=false)
    @JsonIgnore
    public Integer getStockId() {
        return this.stockId;
    }

    @JsonSetter
    public void setStockId(Integer stockId) {
        this.stockId = stockId;
        SalesStock salesStock = new SalesStock();
        salesStock.setId(this.getStockId());
        this.setStocks(salesStock);
    }

    // @Column(name="GOODS_ID", nullable=false)
    @JsonIgnore
    public Integer getGoodsId() {
        return this.goodsId;
    }

    @JsonSetter
    public void setGoodsId(Integer goodsId) {
        this.goodsId = goodsId;
        Goods goods = new Goods();
        goods.setId(this.getGoodsId());
        this.setGoodss(goods);
    }

    // @Column(name="GOODS_UNIT_ID")
    @JsonIgnore
    public Integer getGoodsUnitId() {
        return this.goodsUnitId;
    }

    @JsonSetter
    public void setGoodsUnitId(Integer goodsUnitId) {
        this.goodsUnitId = goodsUnitId;
        if (this.goodsUnitId == null) {
            this.goodsUnits = null;
        } else {
            GoodsUnit goodsUnit = new GoodsUnit();
            goodsUnit.setId(this.goodsUnitId);
            this.setGoodsUnits(goodsUnit);
        }
    }

    // @Column(name="GOODS_STATUS_ID", nullable=false)
    @JsonIgnore
    public Integer getGoodsStatusId() {
        return this.goodsStatusId;
    }

    @JsonSetter
    public void setGoodsStatusId(Integer goodsStatusId) {
        this.goodsStatusId = goodsStatusId;
        Status status = new Status();
        status.setId(this.goodsStatusId);
        this.setGoodsStatuss(status);
    }

    public Integer getQuantity() {
        return quantity;
    }

    public void setQuantity(Integer quantity) {
        this.quantity = quantity;
    }

    public Integer getIsActive() {
        return this.isActive;
    }

    public void setIsActive(Integer isActive) {
        this.isActive = isActive;
    }

    public Date getActiveDate() {
        return this.activeDate;
    }

    @JsonSetter
    public void setActiveDate(Date activeDate) {
        this.activeDate = activeDate;
    }

    @JsonIgnore
    public Date getCreatedAt() {
        return this.createdAt;
    }

    @JsonSetter
    public void setCreatedAt(Date createdAt) {
        this.createdAt = createdAt;
    }

    @JsonIgnore
    public Integer getCreatedUser() {
        return this.createdUser;
    }

    @JsonSetter
    public void setCreatedUser(Integer createdUser) {
        this.createdUser = createdUser;
    }

    @JsonIgnore
    public Date getUpdatedAt() {
        return this.updatedAt;
    }

    @JsonSetter
    public void setUpdatedAt(Date updatedAt) {
        this.updatedAt = updatedAt;
    }

    @JsonIgnore
    public Integer getUpdatedUser() {
        return this.updatedUser;
    }

    @JsonSetter
    public void setUpdatedUser(Integer updatedUser) {
        this.updatedUser = updatedUser;
    }

    @JsonIgnore
    public Date getDeletedAt() {
        return this.deletedAt;
    }

    @JsonSetter
    public void setDeletedAt(Date deletedAt) {
        this.deletedAt = deletedAt;
    }

    @JsonIgnore
    public Integer getDeletedUser() {
        return this.deletedUser;
    }

    @JsonSetter
    public void setDeletedUser(Integer deletedUser) {
        this.deletedUser = deletedUser;
    }

}
