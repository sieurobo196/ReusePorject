package vn.itt.msales.entity;

// Generated Jun 11, 2015 10:37:14 AM by Hibernate Tools 4.3.1
import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.validation.constraints.NotNull;

import org.springframework.format.annotation.NumberFormat;

import vn.itt.msales.common.json.validator.MsalesValidator;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;

import javax.persistence.GenerationType;
import javax.persistence.SequenceGenerator;

/**
 * SalesStock generated by hbm2java
 */
@Entity
@Table(name = "`sales_stock`")
@JsonFilter("JSONFILTER")
@JsonSerialize(include=JsonSerialize.Inclusion.NON_NULL)
public class SalesStock implements java.io.Serializable {

    private static final long serialVersionUID = 6505114283024142028L;

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO, generator = "SEQ_ID")
    @SequenceGenerator(name = "SEQ_ID", sequenceName = "SEQ_SALESSTOCK_ID")
    @Column(name = "ID", unique = true, nullable = false)
    private Integer id;
    
    @Transient
    @NumberFormat(style = NumberFormat.Style.NUMBER)
    private Integer posId;
    
    @Transient
    @NumberFormat(style = NumberFormat.Style.NUMBER)
    private Integer salemanUserId;
   
    @Transient
    @NumberFormat(style = NumberFormat.Style.NUMBER)
    private Integer channelId;
    
    @Transient
    @NumberFormat(style = NumberFormat.Style.NUMBER)
    private Integer statusId;
    
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "CREATED_AT", nullable = false, length = 19)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = MsalesValidator.DATE_FORMAT_LONG, timezone = "GMT+7")
    private Date createdAt;
   
    @Column(name = "CREATED_USER", nullable = false)
    @NotNull(message = MsalesValidator.CREATED_USER_NULL)
    @NumberFormat(style = NumberFormat.Style.NUMBER)
    private Integer createdUser;
    
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "UPDATED_AT", length = 19)
    @JsonIgnore
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = MsalesValidator.DATE_FORMAT_LONG, timezone = "GMT+7")
    private Date updatedAt;

    @Column(name = "UPDATED_USER", nullable = false)
    @NotNull(message = MsalesValidator.UPDATED_USER_NULL)
    private Integer updatedUser;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "DELETED_AT", length = 19)
    @JsonIgnore
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = MsalesValidator.DATE_FORMAT_LONG, timezone = "GMT+7")
    private Date deletedAt;

    @Column(name = "DELETED_USER", nullable = false)
    @NotNull(message = MsalesValidator.DELETED_USER_NULL)
    private Integer deletedUser;
    
    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "POS_ID")
    private POS poss;

    @JsonIgnoreProperties(value = {"street", "hierarchy",
        "ownerName", "birthday", "ownerCode", "ownerCodeDate",
        "ownerCodeLocation", "tel", "mobile", "otherTel", "fax", "email",
        "website", "gpkd", "gpkdDate", "gpkdLocation", "note", "lat",
        "lng", "isActive", "beginAt", "endAt", "channels", "locations",
        "statuss", "createdAt", "createdUser"})
    @JsonInclude(JsonInclude.Include.ALWAYS)
    public POS getPoss() {
        return this.poss;
    }

    @JsonGetter
    public void setPoss(POS pos) {
        this.poss = pos;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "SALEMAN_USER_ID")
    private User salemanUsers;

    @JsonIgnoreProperties(value = {"userCode", "birthday", "monitoringUsers",
        "employerUserId", "isActive", "activeCode", "employerType",
        "useEvoucher", "statusId", "locations", "username", "sex", "email",
        "yahooId", "skypeId", "isdn", "tel", "address", "note",
        "ipLastLogin", "updatedAt", "updatedUser", "employerUsers",
        "createdUser", "companys"})
    @JsonInclude(JsonInclude.Include.ALWAYS)
    public User getSalemanUsers() {
        return salemanUsers;
    }

    @JsonGetter
    public void setSalemanUsers(User salemanUser) {
        this.salemanUsers = salemanUser;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "CHANNEL_ID")
    private Channel channels;

    @JsonIgnoreProperties(value = {"code", "isSalePoint", "address",
        "contactPersonName", "tel", "fax", "email", "lat", "lng", "note",
        "companys", "statuss", "parents", "channelTypes"})
    @JsonInclude(JsonInclude.Include.ALWAYS)
    public Channel getChannels() {
        return channels;
    }

    @JsonGetter
    public void setChannels(Channel channel) {
        this.channels = channel;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "STATUS_ID", nullable = false)
    @NotNull(message = MsalesValidator.STATUS_NULL)
    private Status statuss;

    @JsonIgnoreProperties(value = {"value", "statusTypes"})
    public Status getStatuss() {
        return statuss;
    }

    public void setStatuss(Status status) {
        this.statuss = status;
    }

    public SalesStock() {
    }

    public SalesStock(Integer statusId, Date createdAt, Integer createdUser,
            Date updatedAt, Integer updatedUser, Date deletedAt,
            Integer deletedUser) {
        this.statusId = statusId;
        this.createdAt = createdAt;
        this.createdUser = createdUser;
        this.updatedAt = updatedAt;
        this.updatedUser = updatedUser;
        this.deletedAt = deletedAt;
        this.deletedUser = deletedUser;
    }

    public SalesStock(Integer posId,
            Integer salemanUserId, Integer channelId, Integer statusId,
            Date createdAt, Integer createdUser, Date updatedAt,
            Integer updatedUser, Date deletedAt, Integer deletedUser) {
        this.posId = posId;
        this.salemanUserId = salemanUserId;
        this.channelId = channelId;
        this.statusId = statusId;
        this.createdAt = createdAt;
        this.createdUser = createdUser;
        this.updatedAt = updatedAt;
        this.updatedUser = updatedUser;
        this.deletedAt = deletedAt;
        this.deletedUser = deletedUser;
    }

    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    // @Column(name = "CHANNEL_SALE_POINT_INFORMATION_ID")
    @JsonIgnore
    public Integer getPosId() {
        return this.posId;
    }

    @JsonSetter
    public void setPosId(
            Integer posId) {
        this.posId = posId;
        if (this.posId == null) {
            this.poss = null;
        } else {
            POS c = new POS();
            c.setId(this.posId);
            this.setPoss(c);
        }
    }

    // @Column(name = "SALEMAN_USER_ID")
    @JsonIgnore
    public Integer getSalemanUserId() {
        return this.salemanUserId;
    }

    @JsonSetter
    public void setSalemanUserId(Integer salemanUserId) {
        this.salemanUserId = salemanUserId;
        if (this.salemanUserId == null) {
            this.salemanUsers = null;
        } else {
            User user = new User();
            user.setId(this.salemanUserId);
            this.setSalemanUsers(user);
        }
    }

    // @Column(name = "CHANNEL_ID")
    @JsonIgnore
    public Integer getChannelId() {
        return this.channelId;
    }

    @JsonSetter
    public void setChannelId(Integer channelId) {
        this.channelId = channelId;
        if (this.channelId == null) {
            this.channels = null;
        } else {
            Channel channel = new Channel();
            channel.setId(this.channelId);
            this.setChannels(channel);
        }
    }

    // @Column(name = "STATUS_ID", nullable = false)
    @JsonIgnore
    public Integer getStatusId() {
        return this.statusId;
    }

    @JsonSetter
    public void setStatusId(Integer statusId) {
        this.statusId = statusId;
        Status status = new Status();
        status.setId(this.getStatusId());
        this.setStatuss(status);
    }

    @JsonIgnore
    public Date getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(Date createdAt) {
        this.createdAt = createdAt;
    }

    @JsonIgnore
    public Integer getCreatedUser() {
        return this.createdUser;
    }

    @JsonSetter
    public void setCreatedUser(Integer createdUser) {
        this.createdUser = createdUser;
    }

    @JsonIgnore
    public Date getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(Date updatedAt) {
        this.updatedAt = updatedAt;
    }

    @JsonIgnore
    public Integer getUpdatedUser() {
        return this.updatedUser;
    }

    @JsonSetter
    public void setUpdatedUser(Integer updatedUser) {
        this.updatedUser = updatedUser;
    }

    @JsonIgnore
    public Date getDeletedAt() {
        return this.deletedAt;
    }

    public void setDeletedAt(Date deletedAt) {
        this.deletedAt = deletedAt;
    }

    @JsonIgnore
    public Integer getDeletedUser() {
        return this.deletedUser;
    }

    @JsonSetter
    public void setDeletedUser(Integer deletedUser) {
        this.deletedUser = deletedUser;
    }

}
