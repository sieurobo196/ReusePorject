package vn.itt.msales.entity;
// Generated Jun 16, 2015 6:34:19 PM by Hibernate Tools 4.3.1

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.validation.constraints.Max;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;
import vn.itt.msales.common.json.validator.MsalesValidator;

/**
 * MCPDetails generated by hbm2java
 */
@Entity
@Table(name = "`mcp_details`")
@JsonSerialize(include=JsonSerialize.Inclusion.NON_NULL)
@JsonFilter("JSONFILTER")
public class MCPDetails implements java.io.Serializable {

    private static final long serialVersionUID = -6231190790103611474L;

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO, generator = "SEQ_ID")
    @SequenceGenerator(name = "SEQ_ID", sequenceName = "SEQ_MCPDETAILS_ID")
    @Column(name = "ID", unique = true, nullable = false)
    private Integer id;

    @Transient
    private Integer mcpId;

    @Transient
    private Integer locationId;

    @Transient
    private Integer posId;

    @Transient
    private Integer implementEmployeeId;

    @Transient
    private Integer statusId;
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "FINISH_TIME", nullable = false, length = 19)
    @NotNull(message = "finishTime không được null ")
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = MsalesValidator.DATE_FORMAT_LONG, timezone = "GMT+7")
    private Date finishTime;
    @Column(name = "IS_ACTIVE", nullable = false)
    @NotNull(message = "isActive không được null")
    @Min(value = 0, message = MsalesValidator.ERROR_VALUE_INVALID)
    @Max(value = 1, message = MsalesValidator.ERROR_VALUE_INVALID)
    private Integer isActive;
    @Column(name = "NOTE", length = 256)
    private String note;
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "CREATED_AT", nullable = false, length = 19)
    @JsonIgnore
    private Date createdAt;
    @Column(name = "CREATED_USER", nullable = false)
    @NotNull(message = MsalesValidator.CREATED_USER_NULL)
    private Integer createdUser;
    
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "UPDATED_AT", length = 19)
    @JsonIgnore
    private Date updatedAt;

    @Column(name = "UPDATED_USER", nullable = false)
    @NotNull(message = MsalesValidator.UPDATED_USER_NULL)
    private Integer updatedUser;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "DELETED_AT", length = 19)
    @JsonIgnore
    private Date deletedAt;

    @Column(name = "DELETED_USER", nullable = false)
    @NotNull(message = MsalesValidator.DELETED_USER_NULL)
    private Integer deletedUser;

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "IMPLEMENT_EMPLOYEE_ID", nullable = false)
    @JsonIgnoreProperties(value = {"companys", "username", "userCode", "password", "birthday", "sex", "email", "yahooId", "skypeId", "isdn", "tel", "address", "locations", "monitoringUsers", "employerUsers", "note", "isActive", "activeCode", "employerType", "useEvoucher", "ipLastLogin", "statusId", "createdAt", "createdUser", "updatedAt", "updatedUser", "deletedAt"})
    private User implementEmployees;

    @NotNull(message = "implementEmployeeId không được null")
    public User getImplementEmployees() {
        return implementEmployees;
    }

    public void setImplementEmployees(User implementEmployees) {
        this.implementEmployees = implementEmployees;

    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "MCP_ID", nullable = false)
    @JsonIgnoreProperties(value = {"beginDate", "finishTime", "isActive", "note", "implementEmployees", "statuss"})
    private MCP mcps;

    @NotNull(message = "mcpId không được null")
    public MCP getMcps() {
        return mcps;
    }

    public void setMcps(MCP mcps) {
        this.mcps = mcps;

    }
    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "POS_ID", nullable = false)
    @JsonIgnoreProperties(value = { "street", "hierarchy",
        "birthday",
        "ownerCode",
        "ownerCodeDate",
        "ownerCodeLocation",
        "tel",
        "mobile",
        "otherTel",
        "fax",
        "email",
        "website",
        "gpkd",
        "gpkdDate",
        "gpkdLocation",
        "note",
        "isActive",
        "beginAt",
        "endAt",
        "channels", "locations", "statuss", "createdAt",
        "createdUser"})
    private POS poss;

    @NotNull(message = "posId không được null")
    public POS getPoss() {
        return poss;
    }

    public void setPoss(POS poss) {
        this.poss = poss;

    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "LOCATION_ID", nullable = false)
    @JsonIgnoreProperties(value = {"code", "locationType", "note", "lat", "lng", "parents"})
    private Location locations;

    @NotNull(message = "locationId không được null")
    public Location getLocations() {
        return locations;
    }

    public void setLocations(Location locations) {
        this.locations = locations;

    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "STATUS_ID", nullable = false)
    @JsonIgnoreProperties(value = {"value"})
    private Status statuss;

    @NotNull(message = "statusId không được null")
    public Status getStatuss() {
        return statuss;
    }

    public void setStatuss(Status statuss) {
        this.statuss = statuss;

    }

    public MCPDetails() {
    }

    public MCPDetails(Integer id, Integer mcpId, Integer locationId, Integer posId, Integer implementEmployeeId, Integer statusId, Date finishTime, Integer isActive, Date createdAt, Integer createdUser, Date updatedAt, Integer updatedUser, Date deletedAt, Integer deletedUser) {
        this.id = id;
        this.mcpId = mcpId;
        this.locationId = locationId;
        this.posId = posId;
        this.implementEmployeeId = implementEmployeeId;
        this.statusId = statusId;
        this.finishTime = finishTime;
        this.isActive = isActive;
        this.createdAt = createdAt;
        this.createdUser = createdUser;
        this.updatedAt = updatedAt;
        this.updatedUser = updatedUser;
        this.deletedAt = deletedAt;
        this.deletedUser = deletedUser;
    }

    public MCPDetails(Integer id, Integer mcpId, Integer locationId, Integer posId, Integer implementEmployeeId, Integer statusId, Date finishTime, Integer isActive, String note, Date createdAt, Integer createdUser, Date updatedAt, Integer updatedUser, Date deletedAt, Integer deletedUser) {
        this.id = id;
        this.mcpId = mcpId;
        this.locationId = locationId;
        this.posId = posId;
        this.implementEmployeeId = implementEmployeeId;
        this.statusId = statusId;
        this.finishTime = finishTime;
        this.isActive = isActive;
        this.note = note;
        this.createdAt = createdAt;
        this.createdUser = createdUser;
        this.updatedAt = updatedAt;
        this.updatedUser = updatedUser;
        this.deletedAt = deletedAt;
        this.deletedUser = deletedUser;
    }

    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @JsonIgnore
    public Integer getMcpId() {
        return this.mcpId;
    }

    @JsonSetter
    public void setMcpId(Integer mcpId) {
        this.mcpId = mcpId;
        if (mcpId != null) {
            MCP s = new MCP();
            s.setId(this.getMcpId());
            this.mcps = s;
        }

    }

    @JsonIgnore
    public Integer getLocationId() {
        return this.locationId;
    }

    @JsonSetter
    public void setLocationId(Integer locationId) {
        this.locationId = locationId;
        if (locationId != null) {
            Location l = new Location();
            l.setId(this.getLocationId());
            this.locations = l;
        }
    }

    @JsonIgnore
    public Integer getPosId() {
        return this.posId;
    }

    @JsonSetter
    public void setPosId(Integer posId) {
        this.posId = posId;
        if (posId != null) {
            POS c = new POS();
            c.setId(this.getPosId());
            this.poss = c;
        }
    }

    @JsonIgnore
    public Integer getImplementEmployeeId() {
        return this.implementEmployeeId;
    }

    @JsonSetter
    public void setImplementEmployeeId(Integer implementEmployeeId) {
        this.implementEmployeeId = implementEmployeeId;
        if (implementEmployeeId != null) {
            User u = new User();
            u.setId(this.getImplementEmployeeId());
            this.implementEmployees = u;
        }
    }

    @JsonIgnore
    public Integer getStatusId() {
        return this.statusId;
    }

    @JsonSetter
    public void setStatusId(Integer statusId) {
        this.statusId = statusId;
        if (statusId != null) {
            Status s = new Status();
            s.setId(this.getStatusId());
            this.statuss = s;
        }
    }

    public Date getFinishTime() {
        return this.finishTime;
    }

    public void setFinishTime(Date finishTime) {
        this.finishTime = finishTime;
    }

    public Integer getIsActive() {
        return this.isActive;
    }

    public void setIsActive(Integer isActive) {
        this.isActive = isActive;
    }

    public String getNote() {
        return this.note;
    }

    public void setNote(String note) {
        this.note = note;
    }

    public Date getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(Date createdAt) {
        this.createdAt = createdAt;
    }

    @JsonIgnore
    public Integer getCreatedUser() {
        return this.createdUser;
    }

    @JsonSetter
    public void setCreatedUser(Integer createdUser) {
        this.createdUser = createdUser;
    }

    public Date getUpdatedAt() {
        return this.updatedAt;
    }

    public void setUpdatedAt(Date updatedAt) {
        this.updatedAt = updatedAt;
    }

    @JsonIgnore
    public Integer getUpdatedUser() {
        return this.updatedUser;
    }

    @JsonSetter
    public void setUpdatedUser(Integer updatedUser) {
        this.updatedUser = updatedUser;
    }

    public Date getDeletedAt() {
        return this.deletedAt;
    }

    public void setDeletedAt(Date deletedAt) {
        this.deletedAt = deletedAt;
    }

    @JsonIgnore
    public Integer getDeletedUser() {
        return this.deletedUser;
    }

    @JsonSetter
    public void setDeletedUser(Integer deletedUser) {
        this.deletedUser = deletedUser;
    }

    /**
     * DuanND
     */
    @Transient
    private Integer isCSDBH;
    @Transient
    private Date ngayCSDBH;

	public Integer getIsCSDBH() {
		return isCSDBH;
	}

	public void setIsCSDBH(Integer isCSDBH) {
		this.isCSDBH = isCSDBH;
	}

	public Date getNgayCSDBH() {
		return ngayCSDBH;
	}

	public void setNgayCSDBH(Date ngayCSDBH) {
		this.ngayCSDBH = ngayCSDBH;
	}
    
}
